# -*- coding: utf-8 -*-
"""Assignment 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j3BPRjQxFNSyKNFwmiHyiFqFqTusRMrT
"""

from collections import deque
from datetime import datetime

# Define the Patient class to store patient details.
class Patient:
    def __init__(self, patient_id, name, medical_history, current_condition):
        self.patient_id = patient_id
        self.name = name
        self.medical_history = medical_history
        self.current_condition = current_condition

# Define the Doctor class to store doctor details.
class Doctor:
    def __init__(self, doctor_id, name, specialty):
        self.doctor_id = doctor_id
        self.name = name
        self.specialty = specialty

# Define the Prescription class to store prescription details.
class Prescription:
    def __init__(self, patient_id, doctor_id, prescription_details):
        self.patient_id = patient_id
        self.doctor_id = doctor_id
        self.prescription_details = prescription_details
        self.issue_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # Capture prescription issue date

# Define AppointmentScheduler class to manage appointments.
class AppointmentScheduler:
    def __init__(self):
        self.appointments = {}  # Maps patient_id to doctor_id for appointments.

    def schedule_appointment(self, patient_id, doctor_id):
        self.appointments[patient_id] = doctor_id

# Define the main HospitalManagement class to integrate all functionalities.
class HospitalManagement:
    def __init__(self):
        self.patients = {}
        self.doctors = {}
        self.consultation_queue = deque()
        self.prescriptions = []
        self.scheduler = AppointmentScheduler()

    def add_patient_from_input(self):
        patient_id = input("Enter patient ID: ")
        name = input("Enter patient's name: ")
        medical_history = input("Enter patient's medical history: ")
        current_condition = input("Enter patient's current condition: ")
        patient = Patient(patient_id, name, medical_history, current_condition)
        self.patients[patient.patient_id] = patient
        self.consultation_queue.append(patient.patient_id)

    def add_doctor_from_input(self):
        doctor_id = input("Enter doctor ID: ")
        name = input("Enter doctor's name: ")
        specialty = input("Enter doctor's specialty: ")
        doctor = Doctor(doctor_id, name, specialty)
        self.doctors[doctor.doctor_id] = doctor

    def schedule_appointment_from_input(self):
        patient_id = input("Enter patient ID for the appointment: ")
        doctor_id = input("Enter doctor ID for the appointment: ")
        self.scheduler.schedule_appointment(patient_id, doctor_id)

    def issue_prescription_during_consultation(self, patient_id, doctor_id, prescription_details):
        prescription = Prescription(patient_id, doctor_id, prescription_details)
        self.prescriptions.append(prescription)  # Add prescription to the stack
        print(f"Prescription issued to patient ID {patient_id} by doctor ID {doctor_id}.")

    def search_patient_summary(self, patient_id):
        patient = self.patients.get(patient_id)
        if not patient:
            print("Patient not found.")
            return

        doctor_id = self.scheduler.appointments.get(patient_id)
        doctor = self.doctors.get(doctor_id) if doctor_id else None
        patient_prescriptions = [p for p in self.prescriptions if p.patient_id == patient_id]

        print(f"\nPatient Summary for ID {patient_id}:")
        print(f"Name: {patient.name}")
        print(f"Medical History: {patient.medical_history}")
        print(f"Current Condition: {patient.current_condition}")
        if doctor:
            print(f"Attending Doctor: {doctor.name} (Specialty: {doctor.specialty})")
        else:
            print("No doctor assigned or appointment made.")
        if patient_prescriptions:
            print("Prescriptions:")
            for pres in patient_prescriptions:
                print(f"- {pres.prescription_details} (Issued: {pres.issue_date})")
        else:
            print("No prescriptions issued.")

    def discharge_or_transfer_patient(self, patient_id):
        if patient_id in self.consultation_queue:
            self.consultation_queue.remove(patient_id)
            print(f"Patient ID {patient_id} removed from the consultation queue.")
        if patient_id in self.patients:
            del self.patients[patient_id]
            print(f"Patient ID {patient_id} discharged or transferred and removed from the system.")
        else:
            print(f"Patient record for ID {patient_id} not found in the system.")

    def save_data_to_file(self, filename="hospital_management.txt"):
        # Prepare data for serialization
        data = {
            "patients": {patient_id: patient.__dict__ for patient_id, patient in self.patients.items()},
            "doctors": {doctor_id: doctor.__dict__ for doctor_id, doctor in self.doctors.items()},
            "appointments": self.scheduler.appointments,
            "prescriptions": [prescription.__dict__ for prescription in self.prescriptions],
            "consultation_queue": list(self.consultation_queue)}


        with open(filename, "w") as file:
            json.dump(data, file, indent=4, default=str)  # default=str handles datetime serialization
        print(f"Data saved to {filename}.")

    def save_data_to_file(self, filename="hospital_management.txt"):
        # Prepare data for serialization
        data = {
            "patients": {patient_id: patient.__dict__ for patient_id, patient in self.patients.items()},
            "doctors": {doctor_id: doctor.__dict__ for doctor_id, doctor in self.doctors.items()},
            "appointments": self.scheduler.appointments,
            "prescriptions": [prescription.__dict__ for prescription in self.prescriptions],
            "consultation_queue": list(self.consultation_queue)
        }

        # Serialize data to JSON and save to file
        with open(filename, "w") as file:
            json.dump(data, file, indent=4, default=str)  # default=str handles datetime serialization
        print(f"Data saved to {filename}.")

def main():
    hospital_management = HospitalManagement()
    print("Welcome to the Hospital Management System")

    while True:
        print("\nOptions:")
        print("1. Add Doctor")
        print("2. Add Patient")
        print("3. Schedule Appointment")
        print("4. Issue Prescription")
        print("5. Search Patient Summary")
        print("6. Discharge or Transfer Patient")
        print("7. Save Data to File")
        print("8. Exit")

        choice = input("Choose an option: ")

        if choice == '1':
            hospital_management.add_doctor_from_input()
        elif choice == '2':
            hospital_management.add_patient_from_input()
        elif choice == '3':
            hospital_management.schedule_appointment_from_input()
        elif choice == '4':
            patient_id = input("Enter patient ID for prescription: ")
            doctor_id = input("Enter doctor ID for prescription: ")
            prescription_details = input("Enter prescription details: ")
            hospital_management.issue_prescription_during_consultation(patient_id, doctor_id, prescription_details)
        elif choice == '5':
            patient_id = input("Enter patient ID to search: ")
            hospital_management.search_patient_summary(patient_id)
        elif choice == '6':
            patient_id = input("Enter patient ID to discharge or transfer: ")
            hospital_management.discharge_or_transfer_patient(patient_id)
        elif choice == '7':
            hospital_management.save_data_to_file()
        elif choice == '8':
            print("Exiting system.")
            break
        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    main()

def read_and_print_file_contents(filename="hospital_management.txt"):
    try:
        with open(filename, "r") as file:
            contents = file.read()
            print(f"Contents of {filename}:")
            print(contents)
    except FileNotFoundError:
        print(f"File {filename} not found. Please ensure it exists and try again.")

# Call the function to read and print the file contents.
read_and_print_file_contents()

from collections import deque

class HospitalManagement:
    def __init__(self):
        self.consultation_queue = deque()

    def add_patient_to_consultation_queue(self, patient_id):
        self.consultation_queue.append(patient_id)
        print(f"Patient {patient_id} has been added to the consultation queue.")

    def consult_next_patient(self):
        if self.consultation_queue:
            next_patient = self.consultation_queue.popleft()
            print(f"Consulting patient {next_patient} now.")
            return next_patient
        else:
            print("No patients in the queue.")
            return None

def main():
    hospital_management = HospitalManagement()

    while True:
        print("\nHospital Management System")
        print("1. Add Patient to Consultation Queue")
        print("2. Consult Next Patient")
        print("3. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            patient_id = input("Enter patient ID to add to the queue: ")
            if patient_id.isdigit():
                hospital_management.add_patient_to_consultation_queue(patient_id)
            else:
                print("Please enter a valid numeric patient ID.")
        elif choice == '2':
            hospital_management.consult_next_patient()
        elif choice == '3':
            print("Exiting Hospital Management System.")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 3.")

if __name__ == "__main__":
    main()

from collections import deque
from datetime import datetime

class Patient:
    def __init__(self, patient_id, name, medical_history, current_condition, admission_date):
        self.patient_id = patient_id
        self.name = name
        self.medical_history = medical_history
        self.current_condition = current_condition
        self.admission_date = datetime.strptime(admission_date, '%Y-%m-%d')

    def to_dict(self):
        # Convert patient data to a dictionary for easier serialization to a file.
        return {
            "patient_id": self.patient_id,
            "name": self.name,
            "medical_history": self.medical_history,
            "current_condition": self.current_condition,
            "admission_date": self.admission_date.strftime('%Y-%m-%d')
        }

class HospitalManagement:
    def __init__(self, max_patients=None):
        self.patients_list = []
        self.max_patients = max_patients
        self.consultation_queue = deque()

    def add_patient_from_input(self):
        patient_id = input("Enter patient ID: ")
        name = input("Enter patient's name: ")
        medical_history = input("Enter patient's medical history: ")
        current_condition = input("Enter patient's current condition: ")
        admission_date = input("Enter patient's admission date (YYYY-MM-DD): ")
        patient = Patient(patient_id, name, medical_history, current_condition, admission_date)
        self.patients_list.append(patient)

    def sort_patients_by_admission_date(self):
        self.patients_list.sort(key=lambda patient: patient.admission_date)

    def save_sorted_patients_to_file(self, filename="queue_order.txt"):
        sorted_data = [patient.to_dict() for patient in self.patients_list]
        with open(filename, "w") as file:
            for data in sorted_data:
                file.write(str(data) + "\n")
        print(f"Sorted patient data saved to {filename}.")

def main():
    hospital_management = HospitalManagement(max_patients=5)
    while True:
        print("\nHospital Management System")
        print("1. Add Patient")
        print("2. Sort Patients by Admission Date and Save to File")
        print("3. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            hospital_management.add_patient_from_input()
        elif choice == '2':
            hospital_management.sort_patients_by_admission_date()
            hospital_management.save_sorted_patients_to_file()
        elif choice == '3':
            print("Exiting Hospital Management System.")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 3.")

if __name__ == "__main__":
    main()

def read_and_print_file_contents(filename="queue_order.txt"):
    try:
        with open(filename, "r") as file:
            contents = file.read()
            print(f"Contents of {filename}:")
            print(contents)
    except FileNotFoundError:
        print(f"File {filename} not found. Please ensure it exists and try again.")

# Call the function to read and print the file contents.
read_and_print_file_contents()